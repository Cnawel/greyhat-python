'''
In this improved version:

We use a try...except block to handle exceptions more gracefully.
We use a with statement for managing the PyShark FileCapture context, ensuring the file is properly closed.
We catch the FileNotFoundError in case the specified PCAP file is not found.
We catch and display any other exceptions that may occur during the execution of the script.
We provide more informative error messages in case of issues.
We maintain a clean and concise structure, adhering to PEP 8 style guidelines.
'''
import pyshark

def search_payload_for_keywords(pcap_file, keywords):
    detections = 0

    try:
        # Create a PyShark capture object
        with pyshark.FileCapture(pcap_file) as capture:
            # Loop through each packet in the capture file
            for packet in capture:
                # Check if the packet contains an HTTP layer
                if "HTTP" in packet:
                    # Get the HTTP payload (HTTP layer is present)
                    payload = str(packet["HTTP"])

                    # Search for keywords in the payload
                    for keyword in keywords:
                        if keyword in payload:
                            detections += 1
                            print(f"Detected '{keyword}' in packet #{packet.number}")

    except FileNotFoundError:
        print(f"Error: File '{pcap_file}' not found.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

    # Analyze the results
    if detections > 0:
        print(f"Detected {detections} potential keywords in the HTTP payload.")
    else:
        print("No potential keywords detected.")

if __name__ == "__main__":
    # Replace 'your_capture.pcap' with the path to your PCAP file
    pcap_file_path = 'your_capture.pcap'

    # Define a list of keywords or patterns to search for
    detection_keywords = ["malware", "exploit", "vulnerability", "payload_pattern"]

    search_payload_for_keywords(pcap_file_path, detection_keywords)
